// Generated by CoffeeScript 1.3.3
/*global require, __dirname, process
*/

(function(express, dir, port) {
  var app, getUrl, http, io, isUniqueName, nextId, people, server;
  if (port == null) {
    port = 3005;
  }
  dir += '/dist';
  nextId = 0;
  people = [
    {
      "id": "" + (nextId++),
      "name": "Saasha",
      "age": "5"
    }, {
      "id": "" + (nextId++),
      "name": "Planet",
      "age": "7"
    }
  ];
  getUrl = function() {
    return "http://localhost:" + port;
  };
  isUniqueName = function(name) {
    var person;
    return ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = people.length; _i < _len; _i++) {
        person = people[_i];
        if (person.name === name) {
          _results.push(name);
        }
      }
      return _results;
    })()).length === 0;
  };
  app = express();
  http = require('http');
  server = http.createServer(app);
  io = require('socket.io').listen(server);
  server.listen(port);
  app.configure(function() {
    app.set('view options', {
      layout: false
    });
    app.use(express.bodyParser());
    app.use(express["static"](dir));
    app.use(app.router);
    app.engine('.html', function(str, options) {
      return function(locals) {
        return str;
      };
    });
    app.get('/', function(req, res) {
      return res.render("" + dir + "/index.html");
    });
    app.get('/people', function(req, res) {
      return res.json(people);
    });
    app.get('/people/details/:id', function(req, res) {
      var current, id, person, _i, _len;
      id = req.params.id;
      for (_i = 0, _len = people.length; _i < _len; _i++) {
        person = people[_i];
        if (parseInt(person.id, 10) === parseInt(id, 10)) {
          current = person;
        }
      }
      return res.json(current);
    });
    return app.post('/people', function(req, res) {
      var message, name, person;
      name = req.body.name;
      message = {
        "title": "Duplicate!",
        "message": "" + name + " is a duplicate.  Please enter a new name."
      };
      if (!isUniqueName(name)) {
        return res.send(message, 403);
      }
      person = {
        "id": "" + (nextId++),
        "name": "" + name,
        "age": "0"
      };
      people.push(person);
      return res.json(person);
    });
  });
  return io.sockets.on('connection', function(socket) {
    return socket.on('search', function(data) {
      return socket.broadcast.emit('searched', data);
    });
    /*
    		socket.on 'gitHubSearch', (data) ->
    			console.log 'gitHubSearch', data
    			socket.emit 'gitHubSearch',
    				lastGitHubSearch: data
    */

  });
  /*
  	app.listen port, ->
  		console.log "open your browser to the url below"
  		console.log getUrl()
  */

})(require('express'), __dirname, process.argv.splice(2)[0]);
